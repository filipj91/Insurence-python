# -*- coding: utf-8 -*-
"""Cost insurence Vol2.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1aWVqA3-RrJ-my7GJqgMEwegrQcIhLRq7
"""

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.model_selection import train_test_split, GridSearchCV
from sklearn.linear_model import LinearRegression
from sklearn.ensemble import RandomForestRegressor
from sklearn.metrics import mean_squared_error, r2_score
from sklearn.preprocessing import StandardScaler
from sklearn.tree import DecisionTreeRegressor
import warnings
import gdown
import os

warnings.filterwarnings("ignore")

# Sprawdzenie, czy pliki są dostępne lokalnie, czy pobrane z Google Drive
data_path = "data/insurance.csv"
if not os.path.exists(data_path):
    url = "https://drive.google.com/uc?id=1-9hXY8s5kDU4JEmQiehvLV_h8nc3MYy2"
    output = "data/insurance.csv"
    gdown.download(url, output, quiet=False)

# Wczytaj dane
df = pd.read_csv(data_path)

# Kodowanie zmiennych kategorycznych
df.replace({'sex': {'male': 0, 'female': 1}}, inplace=True)
df.replace({'smoker': {'yes': 0, 'no': 1}}, inplace=True)
df.replace({'region': {'southeast': 0, 'southwest': 1, 'northeast': 2, 'northwest': 3}}, inplace=True)

# Features and target variable
X = df.drop(columns='charges', axis=1)
Y = df['charges']

# Podziel dane na zestaw treningowy i testowy
X_train, X_test, Y_train, Y_test = train_test_split(X, Y, test_size=0.2, random_state=42)

# Skalowanie danych
scaler = StandardScaler()
X_train_scaled = scaler.fit_transform(X_train)
X_test_scaled = scaler.transform(X_test)

# 1. Regresja Liniowa
linear_regressor = LinearRegression()
linear_regressor.fit(X_train_scaled, Y_train)

# Predykcje
training_data_prediction_lr = linear_regressor.predict(X_train_scaled)
r2_train_lr = r2_score(Y_train, training_data_prediction_lr)
print('R squared for training data (Linear Regression): ', r2_train_lr)

test_data_prediction_lr = linear_regressor.predict(X_test_scaled)
r2_test_lr = r2_score(Y_test, test_data_prediction_lr)
print('R squared for test data (Linear Regression): ', r2_test_lr)

# 2. Random Forest Regressor
rf_regressor = RandomForestRegressor(n_estimators=100, random_state=42)
rf_regressor.fit(X_train_scaled, Y_train)

# Predykcje
training_data_prediction_rf = rf_regressor.predict(X_train_scaled)
r2_train_rf = r2_score(Y_train, training_data_prediction_rf)
print('R squared for training data (Random Forest): ', r2_train_rf)

test_data_prediction_rf = rf_regressor.predict(X_test_scaled)
r2_test_rf = r2_score(Y_test, test_data_prediction_rf)
print('R squared for test data (Random Forest): ', r2_test_rf)

# 3. GridSearchCV do tuningu hiperparametrów dla Random Forest
param_grid = {
    'n_estimators': [100, 200, 300],
    'max_depth': [10, 15, 20],
    'min_samples_split': [2, 5, 10],
    'min_samples_leaf': [1, 2, 4]
}

grid_search = GridSearchCV(estimator=RandomForestRegressor(random_state=42), param_grid=param_grid, cv=3, n_jobs=-1, verbose=2)
grid_search.fit(X_train_scaled, Y_train)

print("Best parameters for Random Forest:", grid_search.best_params_)

# Model z najlepszymi parametrami
best_rf_regressor = grid_search.best_estimator_

# Predykcje
training_data_prediction_rf_best = best_rf_regressor.predict(X_train_scaled)
r2_train_rf_best = r2_score(Y_train, training_data_prediction_rf_best)
print('R squared for training data (Tuned Random Forest): ', r2_train_rf_best)

test_data_prediction_rf_best = best_rf_regressor.predict(X_test_scaled)
r2_test_rf_best = r2_score(Y_test, test_data_prediction_rf_best)
print('R squared for test data (Tuned Random Forest): ', r2_test_rf_best)

# 4. Predykcja dla nowych danych wejściowych
input_data = (31, 1, 25.74, 0, 1, 0)
input_data_as_numpy_array = np.asarray(input_data).reshape(1, -1)
input_data_scaled = scaler.transform(input_data_as_numpy_array)  # Skalowanie danych wejściowych

# Predykcja dla regresji liniowej
prediction_lr = linear_regressor.predict(input_data_scaled)
print('Predicted insurance cost using Linear Regression: USD', prediction_lr[0])

# Predykcja dla Random Forest
prediction_rf = rf_regressor.predict(input_data_scaled)
print('Predicted insurance cost using Random Forest: USD', prediction_rf[0])

# Predykcja dla najlepszego modelu Random Forest
prediction_rf_best = best_rf_regressor.predict(input_data_scaled)
print('Predicted insurance cost using Tuned Random Forest: USD', prediction_rf_best[0])